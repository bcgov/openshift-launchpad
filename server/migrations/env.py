'''This allows 'flask db upgrade' to execute correctly.'''
from __future__ import with_statement

import logging
from logging.config import fileConfig
from flask import current_app
from sqlalchemy import engine_from_config
from sqlalchemy import pool
from alembic import context

# this is the Alembic Config object, which provides
# access to the values within the .ini file in use.
CONFIG = context.config # pylint: disable=no-member; dymamically generated by alembic

# Interpret the config file for Python logging.
# This line sets up loggers basically.
fileConfig(CONFIG.config_file_name)
LOGGER = logging.getLogger('alembic.env')

# add your model's MetaData object here
# for 'autogenerate' support
# from myapp import mymodel
# target_metadata = mymodel.Base.metadata

CONFIG.set_main_option(
    'sqlalchemy.url', current_app.config.get(
        'SQLALCHEMY_DATABASE_URI').replace('%', '%%'))
TARGET_METADATA = current_app.extensions['migrate'].db.metadata

# other values from the config, defined by the needs of env.py,
# can be acquired:
# my_important_option = config.get_main_option("my_important_option")
# ... etc.


def run_migrations_offline():
    """Run migrations in 'offline' mode.

    This configures the context with just a URL
    and not an Engine, though an Engine is acceptable
    here as well.  By skipping the Engine creation
    we don't even need a DBAPI to be available.

    Calls to context.execute() here emit the given string to the
    script output.

    """
    url = CONFIG.get_main_option("sqlalchemy.url")
    context.configure( # pylint: disable=no-member; alembic generates
        url=url, TARGET_METADATA=TARGET_METADATA, literal_binds=True
    )

    with context.begin_transaction(): # pylint: disable=no-member; alembic generates
        context.run_migrations() # pylint: disable=no-member; alembic generates


def run_migrations_online():
    """Run migrations in 'online' mode.

    In this scenario we need to create an Engine
    and associate a connection with the context.

    """

    # this callback is used to prevent an auto-migration from being generated
    # when there are no changes to the schema
    # reference: http://alembic.zzzcomputing.com/en/latest/cookbook.html
    # pylint: disable=unused-argument; callback signature predefined
    def process_revision_directives(context_var, revision, directives): # pylint: disable=no-member; alembic generates
        if getattr(CONFIG.cmd_opts, 'autogenerate', False):
            script = directives[0]
            if script.upgrade_ops.is_empty():
                directives[:] = []
                LOGGER.info('No changes in schema detected.')

    connectable = engine_from_config(
        CONFIG.get_section(CONFIG.config_ini_section),
        prefix='sqlalchemy.',
        poolclass=pool.NullPool,
    )

    with connectable.connect() as connection:
        context.configure( # pylint: disable=no-member; alembic generates
            connection=connection,
            TARGET_METADATA=TARGET_METADATA,
            process_revision_directives=process_revision_directives,
            **current_app.extensions['migrate'].configure_args
        )

        with context.begin_transaction(): # pylint: disable=no-member; alembic generates
            context.run_migrations() # pylint: disable=no-member; alembic generates


if context.is_offline_mode(): # pylint: disable=no-member; alembic generates
    run_migrations_offline()
else:
    run_migrations_online()
